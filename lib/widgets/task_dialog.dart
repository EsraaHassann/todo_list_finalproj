/*import 'package:flutter/material.dart';
import '../models/task_model.dart';

class TaskDialog extends StatelessWidget {
  final Task? task;
  final Function(Task) onSave;

  const TaskDialog({Key? key, this.task, required this.onSave})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    final nameController = TextEditingController(text: task?.name);
    final detailsController = TextEditingController(text: task?.details);

    return AlertDialog(
      title: Text(task == null ? "Add Task" : "Edit Task"),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: nameController,
            decoration: const InputDecoration(labelText: "Task Name"),
          ),
          TextField(
            controller: detailsController,
            decoration: const InputDecoration(labelText: "Task Details"),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text("Cancel"),
        ),
        ElevatedButton(
          onPressed: () {
            onSave(Task(
              name: nameController.text,
              details: detailsController.text,
            ));
            Navigator.pop(context);
          },
          child: const Text("Save"),
        ),
      ],
    );
  }
}*/

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart'; // Ensure this import is added
import '../models/task_model.dart';

// class TaskDialog extends StatefulWidget {
//   final Task? task;
//   final Function(Task) onSave;

//   const TaskDialog({Key? key, this.task, required this.onSave}) : super(key: key);

//   @override
//   _TaskDialogState createState() => _TaskDialogState();
// }

// class _TaskDialogState extends State<TaskDialog> {
//   final _formKey = GlobalKey<FormState>();
//   late String title;
//   late String description;

//   @override
//   void initState() {
//     super.initState();
//     // Initialize the title and description fields with existing task values if any
//     if (widget.task != null) {
//       title = widget.task!.title;
//       description = widget.task!.description;
//     } else {
//       title = '';
//       description = '';
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     return AlertDialog(
//       title: Text(widget.task == null ? 'Add Task' : 'Edit Task'),
//       content: Form(
//         key: _formKey,
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             TextFormField(
//               initialValue: title,
//               decoration: const InputDecoration(labelText: 'Title'),
//               validator: (value) {
//                 if (value == null || value.isEmpty) {
//                   return 'Please enter a title';
//                 }
//                 return null;
//               },
//               onChanged: (value) => title = value,
//             ),
//             TextFormField(
//               initialValue: description,
//               decoration: const InputDecoration(labelText: 'Description'),
//               validator: (value) {
//                 if (value == null || value.isEmpty) {
//                   return 'Please enter a description';
//                 }
//                 return null;
//               },
//               onChanged: (value) => description = value,
//             ),
//           ],
//         ),
//       ),
//       actions: [
//         TextButton(
//           onPressed: () {
//             if (_formKey.currentState!.validate()) {
//               final task = Task(
//                 id: '', //it is generated by firestone 
//                 title: title,
//                 description: description,
//                 createdAt: Timestamp.now(), // Current timestamp
//               );
//               widget.onSave(task); // Call the onSave function passed from the parent widget
//               Navigator.pop(context); // Close the dialog
//             }
//           },
//           child: const Text('Save'),
//         ),
//         TextButton(
//           onPressed: () => Navigator.pop(context), // Close the dialog without saving
//           child: const Text('Cancel'),
//         ),
//       ],
//     );
//   }
// }

class TaskDialog extends StatefulWidget {
  final Task? task;
  final Function(Task) onSave;

  const TaskDialog({Key? key, this.task, required this.onSave}) : super(key: key);

  @override
  _TaskDialogState createState() => _TaskDialogState();
}

class _TaskDialogState extends State<TaskDialog> {
  final _formKey = GlobalKey<FormState>();
  
  String title = '';
  String description = '';
  String? selectedCategory;
  TextEditingController _dateController = TextEditingController();
  TextEditingController _startTimeController = TextEditingController();
  TextEditingController _endTimeController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // Initialize the title, description, and other fields with existing task values if any
    if (widget.task != null) {
      title = widget.task!.title;
      description = widget.task!.description;
      _dateController.text = widget.task!.startDate;
      _startTimeController.text = widget.task!.startTime;
      _endTimeController.text = widget.task!.endTime;
    } else {
      title = '';
      description = '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.task == null ? 'Add Task' : 'Edit Task'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Task Name Field
              const Text(
                "Task Name",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 5),
              TextFormField(
                initialValue: title,
                decoration: InputDecoration(
                  hintText: 'Task name',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a task name';
                  }
                  return null;
                },
                onChanged: (value) => title = value,
              ),
              const SizedBox(height: 10),

              // Category Section
              const Text(
                "Category",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 5),
              Wrap(
                spacing: 8.0,
                children: ['Work', 'Personal', 'Urgent'].map((category) {
                  return ChoiceChip(
                    label: Text(category),
                    selected: selectedCategory == category,
                    onSelected: (isSelected) {
                      setState(() {
                        selectedCategory = isSelected ? category : null;
                      });
                    },
                  );
                }).toList(),
              ),
              const SizedBox(height: 10),

              // Date Picker
              const Text(
                "Date & Time",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 5),
              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _dateController,
                      readOnly: true,
                      decoration: InputDecoration(
                        hintText: 'Select Date',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        suffixIcon: Icon(Icons.calendar_today),
                      ),
                      onTap: _pickDate,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 10),

              // Start and End Time Pickers
              Row(
                children: [
                  Expanded(
                    child: TextFormField(
                      controller: _startTimeController,
                      readOnly: true,
                      decoration: InputDecoration(
                        hintText: 'Start Time',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        suffixIcon: Icon(Icons.access_time),
                      ),
                      onTap: () => _pickTime(_startTimeController),
                    ),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: TextFormField(
                      controller: _endTimeController,
                      readOnly: true,
                      decoration: InputDecoration(
                        hintText: 'End Time',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        suffixIcon: Icon(Icons.access_time),
                      ),
                      onTap: () => _pickTime(_endTimeController),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 10),

              // Description Field
              const Text(
                "Description",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 5),
              TextFormField(
                initialValue: description,
                maxLines: 3,
                decoration: InputDecoration(
                  hintText: 'Add task details...',
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
                onChanged: (value) => description = value,
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () {
            if (_formKey.currentState!.validate()) {
              final task = Task(
                id: '', // Firestore will auto-generate the ID
                title: title,
                description: description,
                createdAt: Timestamp.now(),
                startDate: _dateController.text,
                startTime: _startTimeController.text,
                endTime: _endTimeController.text,
              );
              widget.onSave(task); // Save the task
              Navigator.pop(context);
            }
          },
          child: const Text('Save'),
        ),
        TextButton(
          onPressed: () => Navigator.pop(context), // Close dialog
          child: const Text('Cancel'),
        ),
      ],
    );
  }

  // Helper functions for Date & Time Pickers
  void _pickDate() async {
    DateTime? date = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );

    if (date != null) {
      setState(() {
        _dateController.text = "${date.day} ${_monthName(date.month)}, ${date.year}";
      });
    }
  }

  void _pickTime(TextEditingController controller) async {
    TimeOfDay? time = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );

    if (time != null) {
      setState(() {
        controller.text = time.format(context);
      });
    }
  }

  String _monthName(int month) {
    const months = [
      'January', 'February', 'March', 'April', 'May', 'June',
      'July', 'August', 'September', 'October', 'November', 'December'
    ];
    return months[month - 1];
  }
}
